
(function(){
'use strict';
const $=(id)=>document.getElementById(id);
const choice=(a)=>a[Math.floor(Math.random()*a.length)], rand=(a,b)=>Math.floor(Math.random()*(b-a+1))+a;
const uuid=()=>'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,c=>{const r=Math.random()*16|0,v=c=='x'?r:(r&0x3|0x8);return v.toString(16)});
function save(s){ try{localStorage.setItem('TFL_SAVE', JSON.stringify(s));}catch(e){} } function load(){ try{const s=localStorage.getItem('TFL_SAVE'); return s?JSON.parse(s):null;}catch(e){return null;}}

const STATES = ["Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","New Hampshire","New Jersey","New Mexico","New York","North Carolina","North Dakota","Ohio","Oklahoma","Oregon","Pennsylvania","Rhode Island","South Carolina","South Dakota","Tennessee","Texas","Utah","Vermont","Virginia","Washington","West Virginia","Wisconsin","Wyoming"];
const POS=['QB','RB','WR','TE','OL','DL','LB','CB','S','K','P']; const CONFS = ['NAC','SAC']; const DIVS=['Water','Fire','Wind','Grass','Earth'];

function makeName(){const f=["Jalen","Micah","Evan","Aiden","Noah","Cade","Ty","Logan","Devin","Trey","Jordan","Caleb","Zeke","Mason","Darius","Leo","Taj","Owen","Zion","Kai","Riley","Malik","Andre","Cole","Wes"]; const l=["Carter","Williams","Jackson","Harris","Robinson","Walker","Young","Allen","King","Wright","Hill","Scott","Green","Baker","Nelson","Mitchell","Reed","Howard","Ward","Cox","Gray","Watson","Brooks","Diaz","Long"]; return choice(f)+' '+choice(l); }
function makePlayer(pos,ovr){ return {id:uuid(),name:makeName(),position:pos,overall:ovr,age:rand(21,34),contract:{years:rand(1,4),salary:+(Math.max(0.8,(ovr-55)*0.18)).toFixed(1),bonus:+(Math.max(0,(ovr-55)*0.06)).toFixed(1)},potential:Math.min(99,ovr+rand(3,12)),morale:0.6,stamina:1,injured:false}; }
function makeRoster(){ const r=[]; r.push(makePlayer('QB',rand(72,86))); r.push(makePlayer('RB',rand(70,85))); for(let i=0;i<3;i++) r.push(makePlayer('WR',rand(68,86))); r.push(makePlayer('TE',rand(66,82))); for(let i=0;i<5;i++) r.push(makePlayer('OL',rand(64,84))); for(let i=0;i<4;i++) r.push(makePlayer('DL',rand(64,86))); for(let i=0;i<3;i++) r.push(makePlayer('LB',rand(66,86))); for(let i=0;i<3;i++) r.push(makePlayer('CB',rand(66,86))); r.push(makePlayer('S',rand(66,84))); r.push(makePlayer('K',rand(60,82))); r.push(makePlayer('P',rand(60,82))); return r; }
function makeTeam(i){ const state=STATES[i], conf=CONFS[Math.floor(i/25)], div=DIVS[Math.floor((i%25)/5)], abbr=state.slice(0,2).toUpperCase()+(conf==='NAC'?'N':'S'); const roster=makeRoster(); return {id:uuid(),city:state,name:conf==='NAC'?'Guardians':'Warhawks',abbr,conf,div,wins:0,losses:0,pointsFor:0,pointsAgainst:0,capSpace:200,picks:Array.from({length:10},(_,i)=>({id:uuid(),round:i+1,overall:0,originalTeamId:null})),roster,captains:[],tagCount:0}; }
function makeProspects(n){ const grades=['A+','A','A-','B+','B','B-','C+','C','C-']; const cols=['Coastal U','Lakeview','Midland','Northern','Southern','Western','State','Poly','Tech','Eastern']; return Array.from({length:n},()=>({id:uuid(),name:makeName(),pos:choice(POS),grade:choice(grades),college:choice(cols)})); }
function makeLeague(){ const teams=Array.from({length:50},(_,i)=>makeTeam(i)); teams.forEach(t=> t.picks.forEach(p=> p.originalTeamId=t.id)); const sched=[]; let week=1; for(let i=0;i<50;i+=2){ for(let w=0;w<16;w++){ const home=(i+w)%50,away=(i+1+w)%50; if(home!==away) sched.push({id:uuid(),week:week,home:teams[home].id,away:teams[away].id,played:false,homeScore:0,awayScore:0}); week=(week%16)+1; } } return {season:1,week:1,salaryCap:200,teams,schedule:sched,mediaFeed:[],college:{prospects:makeProspects(180)},awards:{season:{},weekly:[]},playerStats:{}}; }

let league = load()||makeLeague(); let USER=0;
function showTab(id){ document.querySelectorAll('.panel').forEach(p=>p.classList.remove('show')); document.querySelectorAll('.tab').forEach(t=>t.classList.remove('active')); const el=$(id); if(el) el.classList.add('show'); const btn=[...document.querySelectorAll('.tab')].find(b=>b.dataset.tab===id); if(btn) btn.classList.add('active'); if(id==='home') renderHome(); if(id==='gameday') renderGameDay(); if(id==='rosters') renderRosters(); if(id==='standings') renderStandings(); if(id==='schedule') renderSchedule(); if(id==='media') renderMedia(); if(id==='stats') renderStats(); if(id==='college') renderCollege(); if(id==='frontoffice') renderFrontOffice(); if(id==='freeagency') renderFreeAgency(); if(id==='trade') renderTradeCenter(); if(id==='draft') renderDraft(); if(id==='settings') renderSettings(); }
document.querySelectorAll('#tabs .tab').forEach(b=> b.addEventListener('click', ()=> showTab(b.dataset.tab)));

function teamById(id){ return league.teams.find(t=>t.id===id); }
function teamOVR(t){ const core=['QB','RB','WR','OL','DL','LB','CB','S']; const avg=(pos)=>{ const a=t.roster.filter(p=>p.position===pos); if(!a.length) return 60; return a.reduce((s,p)=>s+p.overall,0)/a.length; }; return Math.round(core.reduce((s,pos)=>s+avg(pos),0)/core.length); }
function teamCapUsed(t){ return +(t.roster.reduce((s,p)=> s+(p.contract?.salary||0)+(p.contract?.bonus||0)/Math.max(1,p.contract?.years||1),0)).toFixed(1); }
function capLeft(t){ return +((league.salaryCap||200)-teamCapUsed(t)).toFixed(1); }

function renderHome(){ const t=league.teams[USER]; const sum=$('#homeSummary'); sum.textContent=`Season ${league.season} • Week ${league.week} • Team: ${t.abbr} (${t.wins}-${t.losses}) • PF ${t.pointsFor} / PA ${t.pointsAgainst} • Cap $${league.salaryCap}M`; }
$('#btnNew').onclick=()=>{ league=makeLeague(); USER=0; save(league); renderHome(); };
$('#btnSave').onclick=()=> save(league);
$('#btnLoad').onclick=()=>{ const s=load(); if(s){ league=s; renderHome(); alert('Save loaded'); } };

function renderRosters(){ const sel=$('#rosTeam'); sel.innerHTML=league.teams.map((t,i)=>`<option value="${t.id}" ${i===USER?'selected':''}>${t.abbr}</option>`).join(''); const team=teamById(sel.value)||league.teams[USER]; $('#rosCap').textContent=`Cap Used $${teamCapUsed(team)}M • Left $${capLeft(team)}M`; const root=$('#rosList'); root.innerHTML=''; team.roster.sort((a,b)=>b.overall-a.overall).forEach(p=>{ const row=document.createElement('div'); row.className='proj-row'; row.innerHTML=`<div><b>${p.name}</b> <span class="badge">${p.position} ${p.overall}</span></div><div>$${(p.contract.salary).toFixed(1)}M</div><div>${p.contract.years}y</div><div><button data-edit="${p.id}">Edit</button></div>`; root.appendChild(row); }); sel.onchange=renderRosters; root.onclick=(e)=>{ const btn=e.target.closest('button[data-edit]'); if(!btn) return; const p=team.roster.find(x=>x.id===btn.dataset.edit); const ovr=parseInt(prompt('New OVR', p.overall))||p.overall; p.overall=ovr; save(league); renderRosters(); }; }

function renderStandings(){ const root=$('#standingsList'); root.innerHTML=''; const teams=[...league.teams].sort((a,b)=>(b.wins-b.losses)-(a.wins-a.losses)||b.pointsFor-a.pointsFor); teams.forEach(t=>{ const row=document.createElement('div'); row.className='proj-row'; row.innerHTML=`<div><b>${t.abbr}</b> ${t.city} — ${t.conf}/${t.div}</div><div>${t.wins}-${t.losses}</div><div>PF ${t.pointsFor}</div><div>PA ${t.pointsAgainst}</div>`; root.appendChild(row); }); }

function renderSchedule(){ const root=$('#schedList'); root.innerHTML=''; const games=league.schedule.filter(g=>g.week===league.week); games.forEach(g=>{ const h=teamById(g.home), a=teamById(g.away); const div=document.createElement('div'); div.className='proj-row'; div.innerHTML=`<div>Wk ${g.week} — ${a.abbr} @ ${h.abbr}</div><div>${g.played?g.awayScore:'-'}-${g.played?g.homeScore:'-'}</div><div></div><div><button data-sim="${g.id}">Sim</button></div>`; root.appendChild(div); }); root.onclick=(e)=>{ const btn=e.target.closest('button[data-sim]'); if(!btn) return; simGame(btn.dataset.sim); renderSchedule(); renderStandings(); renderHome(); renderMedia(); }; }
$('#btnSimWeek').onclick=()=>{ league.schedule.filter(g=>g.week===league.week).forEach(g=>!g.played&&simGame(g.id)); league.week=Math.min(16,league.week+1); renderSchedule(); renderStandings(); renderHome(); };
$('#btnSimSeason').onclick=()=>{ for(let w=league.week; w<=16; w++){ league.schedule.filter(g=>g.week===w).forEach(g=>!g.played&&simGame(g.id)); } renderSchedule(); renderStandings(); renderHome(); };

function simGame(id){ const g=league.schedule.find(x=>x.id===id); if(!g) return; const h=teamById(g.home), a=teamById(g.away); const hOVR=teamOVR(h), aOVR=teamOVR(a); const base=20+Math.round((hOVR-aOVR)/4); g.homeScore=Math.max(3, base+rand(-7,14)); g.awayScore=Math.max(3, 20-Math.round((hOVR-aOVR)/6)+rand(-7,14)); g.played=true; if(g.homeScore>g.awayScore){ h.wins++; a.losses++; } else { a.wins++; h.losses++; } h.pointsFor+=g.homeScore; h.pointsAgainst+=g.awayScore; a.pointsFor+=g.awayScore; a.pointsAgainst+=g.homeScore; league.mediaFeed.unshift({week:league.week,type:'game',headline:`${a.abbr} ${g.awayScore} @ ${h.abbr} ${g.homeScore}`,body:`Final • Week ${league.week}`,ts:Date.now()}); }

function renderMedia(){ const root=$('#mediaFeed'); root.innerHTML=''; league.mediaFeed.slice(0,60).forEach(m=>{ const div=document.createElement('div'); div.className='proj-row'; div.innerHTML=`<div><b>${m.headline}</b></div><div class="small">${new Date(m.ts||Date.now()).toLocaleString()}</div><div class="small">${m.type}</div><div class="small">${m.body||''}</div>`; root.appendChild(div); }); }

function renderStats(){ const root=$('#awardsList'); root.innerHTML=''; const teams=[...league.teams].sort((a,b)=>(b.wins-b.losses)-(a.wins-a.losses)); const best=teams[0]; if(!best) return; const div=document.createElement('div'); div.className='proj-row'; div.innerHTML=`<div><b>Best Record</b> ${best.abbr} (${best.wins}-${best.losses})</div><div>PF ${best.pointsFor}</div><div>PA ${best.pointsAgainst}</div><div></div>`; root.appendChild(div); }

function renderCollege(){ const root=$('#collegeList'); root.innerHTML=''; league.college.prospects.slice(0,60).forEach(p=>{ const div=document.createElement('div'); div.className='proj-row'; div.innerHTML=`<div><b>${p.name}</b> <span class="badge">${p.pos}</span></div><div>Grade ${p.grade}</div><div>${p.college}</div><div></div>`; root.appendChild(div); }); }

function renderCapProjections(t){ const root=$('#foProj'); root.innerHTML=''; const hdr=document.createElement('div'); hdr.className='proj-grid'; hdr.innerHTML=`<div class="small">Category</div><div class="small">This Yr</div><div class="small">+1 Yr</div><div class="small">+2 Yrs</div>`; root.appendChild(hdr); function capHit(p){ const c=p.contract||{years:1,salary:1,bonus:0}; const pr=(c.bonus||0)/Math.max(1,c.years); return +((c.salary||0)+pr).toFixed(1); } const used=[0,0,0]; t.roster.forEach(p=>{ used[0]+=capHit(p); used[1]+=capHit(p); used[2]+=capHit(p); }); const row=document.createElement('div'); row.className='proj-row'; row.innerHTML=`<div>Cap Used</div><div>$${used[0].toFixed(1)}M</div><div>$${used[1].toFixed(1)}M</div><div>$${used[2].toFixed(1)}M</div>`; root.appendChild(row); }
function renderFrontOffice(){ const sel=$('#foTeam'); sel.innerHTML=league.teams.map((t,i)=>`<option value="${t.id}" ${i===USER?'selected':''}>${t.abbr}</option>`).join(''); const t=teamById(sel.value)||league.teams[USER]; $('#foCap').textContent=`Cap: $${teamCapUsed(t)}M used / $${(league.salaryCap||200)}M — Left: $${capLeft(t)}M`; const root=$('#foList'); root.innerHTML=''; t.roster.sort((a,b)=>b.overall-a.overall).forEach(p=>{ const pr=(p.contract.bonus||0)/Math.max(1,p.contract.years); const row=document.createElement('div'); row.className='proj-row'; row.innerHTML=`<div><b>${p.name}</b> <span class="badge">${p.position} ${p.overall}</span></div><div>$${(p.contract.salary).toFixed(1)}M + $${pr.toFixed(1)} proration</div><div>${p.contract.years}y</div><div><button data-res="${p.id}">Restructure</button> <button data-rel="${p.id}">Release</button></div>`; root.appendChild(row); }); sel.onchange=renderFrontOffice; root.onclick=(e)=>{ const r=e.target.closest('button[data-res]'); const x=e.target.closest('button[data-rel]'); if(r){ const p=t.roster.find(z=>z.id===r.dataset.res); const maxConv=Math.min(p.contract.salary*0.6, p.contract.salary); const amt=parseFloat(prompt(`Convert how much salary to bonus? Max ${maxConv.toFixed(1)}M`, Math.min(2,maxConv).toFixed(1))); if(!amt||amt<=0||amt>maxConv) return; p.contract.salary=+(p.contract.salary-amt).toFixed(1); p.contract.bonus=+((p.contract.bonus||0)+amt).toFixed(1); save(league); renderFrontOffice(); } if(x){ const p=t.roster.find(z=>z.id===x.dataset.rel); const post=$('#postJune').checked; const pr=(p.contract.bonus||0)/Math.max(1,p.contract.years); const deadNow=post?+pr.toFixed(1):+((p.contract.bonus||0)).toFixed(1); alert(`Released ${p.name}. Dead cap now: $${deadNow}M`); t.roster=t.roster.filter(z=>z.id!==p.id); league.freeAgents=league.freeAgents||[]; league.freeAgents.push(p); league.mediaFeed.unshift({week:league.week,type:'player_vs_org',headline:`${p.name} released`,body:`Post-June ${post?'ON':'OFF'}`,ts:Date.now()}); save(league); renderFrontOffice(); renderRosters(); renderFreeAgency(); } }; renderCapProjections(t); }
$('#foExportCSV').onclick=()=>{ const t=teamById($('#foTeam').value)||league.teams[USER]; const rows=t.roster.map(p=>{ const yrs=p.contract.years; const pr=(p.contract.bonus||0)/Math.max(1,yrs); return {Player:p.name,Pos:p.position,OVR:p.overall,Y0:(p.contract.salary+pr).toFixed(1),Y1:(p.contract.salary+pr).toFixed(1),Y2:(p.contract.salary+pr).toFixed(1),Bonus:(p.contract.bonus||0),PostJuneNow:pr.toFixed(1),PostJuneNext:Math.max(0,(p.contract.bonus||0)-pr).toFixed(1)}; }); const headers=Object.keys(rows[0]||{Player:'',Pos:'',OVR:0,Y0:0,Y1:0,Y2:0,Bonus:0,PostJuneNow:0,PostJuneNext:0}); let csv=headers.join(',')+'\\n'; rows.forEach(r=>{ csv+=headers.map(h=>r[h]).join(',')+'\\n'; }); const url=URL.createObjectURL(new Blob([csv],{type:'text/csv'})); const a=document.createElement('a'); a.href=url; a.download=`${(t.abbr)}_3yr.csv`; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url); };

function expectedSalaryFor(p){ const base=(p.overall-50)*0.22 + (p.position==='QB'?6: p.position==='WR'||p.position==='CB'?2.5: 1.5); const ageAdj=(p.age<=26?1.15: p.age>=32?0.85:1); return Math.max(0.6, +(base*ageAdj).toFixed(1)); }
function faDemand(p){ const ask=expectedSalaryFor(p); const years=Math.min(5, Math.max(1, Math.round((p.overall-60)/10))); return {years:Math.max(1,years), salary:ask}; }
function computeOfferAcceptance(p,offer,team){ const demand=faDemand(p); const ov=offer.salary*offer.years, dv=demand.salary*demand.years; const margin=(ov-dv)/Math.max(1,dv); let prob=0.35+Math.min(0.4,margin); prob += (teamOVR(team)-75)*0.004; return Math.max(0.05, Math.min(0.95, prob)); }
function signFreeAgent(team,p,years,salary){ p.contract={years,salary,bonus:+(salary*0.3).toFixed(1)}; team.roster.push(p); league.freeAgents=(league.freeAgents||[]).filter(x=>x.id!==p.id); league.mediaFeed.unshift({week:league.week,type:'game',headline:`${p.name} signs with ${team.abbr}`,body:`${years}y/$${salary}M`,ts:Date.now()}); }

function leagueFreeAgentsPool(){ if(league.freeAgents&&league.freeAgents.length) return league.freeAgents; const arr=[]; for(let i=0;i<80;i++){ const pos=choice(POS); const ovr=rand(60,84); arr.push(makePlayer(pos,ovr)); } league.freeAgents=arr; return arr; }
function renderFreeAgency(){ leagueFreeAgentsPool(); const root=$('#faList'); root.innerHTML=''; const pos=$('#faPos').value||''; const sort=$('#faSort').value||'ovr'; const team=league.teams[USER]; const arr=league.freeAgents.filter(p=>!pos||p.position===pos).map(p=>{ p.ask=faDemand(p); return p; }); arr.sort((a,b)=> sort==='ovr'? b.overall-a.overall : sort==='salary'? (b.ask.salary - a.ask.salary): a.age-b.age); const header=document.createElement('div'); header.className='proj-row small'; header.innerHTML=`<div><b>Player</b></div><div>Pos</div><div>OVR</div><div>Ask (y/$M)</div>`; root.appendChild(header); arr.slice(0,120).forEach(p=>{ const row=document.createElement('div'); row.className='proj-row'; row.innerHTML=`<div><b>${p.name}</b></div><div>${p.position}</div><div>${p.overall}</div><div>${p.ask.years}y/$${p.ask.salary}</div><div><button data-offer="${p.id}" class="primary">Offer</button></div>`; root.appendChild(row); }); root.onclick=(e)=>{ const btn=e.target.closest('button[data-offer]'); if(!btn) return; const p=league.freeAgents.find(x=>x.id===btn.dataset.offer); const years=parseInt(prompt(`Offer years to ${p.name}`, p.ask.years))||p.ask.years; const salary=parseFloat(prompt(`Offer $M/yr to ${p.name}`, p.ask.salary))||p.ask.salary; const offer={years,salary}; const prob=computeOfferAcceptance(p,offer,team); if(Math.random()<prob){ signFreeAgent(team,p,years,salary); alert('Accepted'); } else { alert('Declined'); } save(league); renderFreeAgency(); renderFrontOffice(); renderRosters(); renderHome(); }; }
$('#faPos').onchange=renderFreeAgency; $('#faSort').onchange=renderFreeAgency;
$('#faSimDay').onclick=()=>{ league.freeAgents=(league.freeAgents||[]).filter(p=> Math.random()<0.1 ? (league.mediaFeed.unshift({week:league.week,type:'game',headline:`${p.name} signs elsewhere`,body:`Market day`,ts:Date.now()}), false) : true); save(league); renderFreeAgency(); };
$('#faResignPhase').onclick=()=>{ const t=league.teams[USER]; const cand=t.roster.filter(p=> (p.contract.years)<=1).slice(0,8); if(!cand.length) return alert('No expiring contracts.'); cand.forEach(p=>{ const ask=faDemand(p); const ans=prompt(`${p.name} asks ${ask.years}y/$${ask.salary}M. Type MATCH or REASON`,'MATCH'); if(!ans) return; const mode=ans.toUpperCase()==='REASON' ? 0.9 : 1.0; const offer={years:ask.years,salary:+(ask.salary*mode).toFixed(1)}; const ok=Math.random() < computeOfferAcceptance(p,offer,t); if(ok){ p.contract={years:offer.years,salary:offer.salary,bonus:+(offer.salary*0.25).toFixed(1)}; league.mediaFeed.unshift({week:league.week,type:'salary_feud',headline:`${p.name} re-signs`,body:`${offer.years}y/$${offer.salary}M`,ts:Date.now()}); } else { league.mediaFeed.unshift({week:league.week,type:'salary_feud',headline:`${p.name} declines to re-sign`,body:`Negotiations stall.`,ts:Date.now()}); } }); save(league); renderFrontOffice(); renderFreeAgency(); };

let TRADE_SEL={A:{players:new Set(),picks:new Set()},B:{players:new Set(),picks:new Set()}};
function tradeValue(p){ return p.overall*1.2 + (p.potential||p.overall)*0.3 + (30-p.age)*0.6 - (p.contract?.salary||0)*0.8; }
function pickValue(r){ return (11-r)*8; }
function renderTradeCenter(){ const aSel=$('#trTeamA'), bSel=$('#trTeamB'); if(!aSel.dataset.ready){ aSel.innerHTML=league.teams.map((t,i)=>`<option value="${t.id}" ${i===USER?'selected':''}>${t.abbr}</option>`).join(''); bSel.innerHTML=league.teams.map((t,i)=>`<option value="${t.id}" ${i===1?'selected':''}>${t.abbr}</option>`).join(''); aSel.dataset.ready='1'; bSel.dataset.ready='1'; aSel.onchange=renderTradeCenter; bSel.onchange=renderTradeCenter; } const A=teamById(aSel.value), B=teamById(bSel.value); const Aroot=$('#trAPlayers'), Broot=$('#trBPlayers'), Ap=$('#trAPicks'), Bp=$('#trBPicks'); Aroot.innerHTML=''; Broot.innerHTML=''; Ap.innerHTML=''; Bp.innerHTML=''; A.roster.sort((x,y)=>y.overall-x.overall).forEach(p=>{ const d=document.createElement('div'); d.className='asset'+(TRADE_SEL.A.players.has(p.id)?' selected':''); d.textContent=`${p.name} (${p.position} ${p.overall})`; d.onclick=()=>{ if(TRADE_SEL.A.players.has(p.id)) TRADE_SEL.A.players.delete(p.id); else TRADE_SEL.A.players.add(p.id); renderTradeCenter(); }; Aroot.appendChild(d); }); B.roster.sort((x,y)=>y.overall-x.overall).forEach(p=>{ const d=document.createElement('div'); d.className='asset'+(TRADE_SEL.B.players.has(p.id)?' selected':''); d.textContent=`${p.name} (${p.position} ${p.overall})`; d.onclick=()=>{ if(TRADE_SEL.B.players.has(p.id)) TRADE_SEL.B.players.delete(p.id); else TRADE_SEL.B.players.add(p.id); renderTradeCenter(); }; Broot.appendChild(d); }); for(let r=1;r<=10;r++){ const da=document.createElement('span'); da.className='asset'; da.textContent=`Round ${r}`; const key=`A_R${r}`; if(TRADE_SEL.A.picks.has(key)) da.classList.add('selected'); da.onclick=()=>{ if(TRADE_SEL.A.picks.has(key)) TRADE_SEL.A.picks.delete(key); else TRADE_SEL.A.picks.add(key); renderTradeCenter(); }; Ap.appendChild(da); const db=document.createElement('span'); db.className='asset'; db.textContent=`Round ${r}`; const keyb=`B_R${r}`; if(TRADE_SEL.B.picks.has(keyb)) db.classList.add('selected'); db.onclick=()=>{ if(TRADE_SEL.B.picks.has(keyb)) TRADE_SEL.B.picks.delete(keyb); else TRADE_SEL.B.picks.add(keyb); renderTradeCenter(); }; Bp.appendChild(db); } let valA=0,valB=0; A.roster.forEach(p=>{ if(TRADE_SEL.A.players.has(p.id)) valA+=tradeValue(p); }); B.roster.forEach(p=>{ if(TRADE_SEL.B.players.has(p.id)) valB+=tradeValue(p); }); TRADE_SEL.A.picks.forEach(k=>{ const r=parseInt(k.split('_R')[1]); valA+=pickValue(r); }); TRADE_SEL.B.picks.forEach(k=>{ const r=parseInt(k.split('_R')[1]); valB+=pickValue(r); }); const delta=Math.round(valA-valB); $('#trFairness').textContent=`Value A: ${Math.round(valA)} | Value B: ${Math.round(valB)} | Δ ${delta}`; $('#trPropose').onclick=()=>{ const band=parseInt($('#trBand').value||'18'); if(Math.abs(delta)<=band){ const aPlayers=A.roster.filter(p=>TRADE_SEL.A.players.has(p.id)); const bPlayers=B.roster.filter(p=>TRADE_SEL.B.players.has(p.id)); A.roster=A.roster.filter(p=>!TRADE_SEL.A.players.has(p.id)).concat(bPlayers); B.roster=B.roster.filter(p=>!TRADE_SEL.B.players.has(p.id)).concat(aPlayers); TRADE_SEL={A:{players:new Set(),picks:new Set()},B:{players:new Set(),picks:new Set()}}; league.mediaFeed.unshift({week:league.week,type:'game',headline:`Trade: ${A.abbr} ↔ ${B.abbr}`,body:`Players and picks exchanged.`,ts:Date.now()}); save(league); renderTradeCenter(); renderRosters(); renderFrontOffice(); $('#trResult').textContent='Trade accepted and processed.'; } else { $('#trResult').textContent='Trade rejected: imbalance too high.'; } }; $('#trSuggest').onclick=()=>{ const needPos=['QB','WR','OL','DL','CB','LB','RB','TE']; const aNeed=choice(needPos), bNeed=choice(needPos); const aGive=A.roster.filter(p=>p.position!==aNeed).sort((x,y)=>y.overall-x.overall)[0]; const bGive=B.roster.filter(p=>p.position!==bNeed).sort((x,y)=>y.overall-x.overall)[0]; if(aGive&&bGive){ TRADE_SEL.A.players=new Set([aGive.id]); TRADE_SEL.B.players=new Set([bGive.id]); renderTradeCenter(); $('#trResult').textContent='Loaded suggested swap.'; } else { $('#trResult').textContent='No suggestion available.'; } }; }

let DRAFT={round:1,pick:1,order:[],started:false,log:[]};
function draftOrder(){ const t=[...league.teams].sort((a,b)=>(a.wins-a.losses)-(b.wins-b.losses)); return t.map(x=>x.id); }
function prospectScore(p){ const map={'A+':98,'A':94,'A-':90,'B+':86,'B':82,'B-':78,'C+':74,'C':70,'C-':66}; return map[p.grade]||72; }
function prospectToPlayer(pro, round=1, pick=1){ const ovr=Math.max(60, Math.min(99, Math.round(prospectScore(pro)+(Math.random()*6-3)))); const years=round<=1?4:(round<=3?4:3); const base=[0,8.0,5.0,3.6,2.8,2.1,1.6,1.2,1.0,0.9,0.8]; const salary=+((base[round]||0.75)*(1+(1-pick/32)*0.2)).toFixed(1); return {id:uuid(),name:pro.name,position:pro.pos,overall:ovr,age:rand(21,23),potential:Math.min(99,ovr+8),morale:0.5,stamina:1,injured:false,contract:{years,salary,bonus:+(salary*0.4).toFixed(1)},rookie:true}; }
function renderDraft(){ $('#drRound').textContent=DRAFT.round; $('#drPick').textContent=DRAFT.pick; const onClock=league.teams.find(t=> t.id=== DRAFT.order[DRAFT.pick-1])||league.teams[USER]; $('#drTeam').textContent=onClock.abbr; const root=$('#drProspects'); root.innerHTML=''; const ranked=[...league.college.prospects].sort((a,b)=> prospectScore(b)-prospectScore(a)).slice(0,40); ranked.forEach(p=>{ const div=document.createElement('div'); div.className='proj-row'; div.innerHTML=`<div><b>${p.name}</b> <span class="badge">${p.pos}</span></div><div>Grade ${p.grade}</div><div>${p.college}</div><div><button data-draft="${p.id}">Draft</button></div>`; root.appendChild(div); }); root.onclick=(e)=>{ const btn=e.target.closest('button[data-draft]'); if(!btn) return; const pro=league.college.prospects.find(x=>x.id===btn.dataset.draft); if(!pro) return; doDraftPick(onClock, pro); }; $('#drLog').innerHTML=DRAFT.log.map(x=>`R${x.round} P${x.pick} — ${x.team} → ${x.name} (${x.pos})`).join('<br>'); }
function nextDraftSlot(){ DRAFT.pick += 1; if(DRAFT.pick> DRAFT.order.length){ DRAFT.pick=1; DRAFT.round += 1; if(DRAFT.round>10){ alert('Draft complete'); return false; } } return true; }
function doDraftPick(team, pro){ const player=prospectToPlayer(pro, DRAFT.round, DRAFT.pick); team.roster.push(player); league.college.prospects=league.college.prospects.filter(x=>x.id!==pro.id); DRAFT.log.push({round:DRAFT.round,pick:DRAFT.pick,team:team.abbr,name:player.name,pos:player.position}); league.mediaFeed.unshift({week:league.week,type:'game',headline:`Draft: ${team.abbr} selects ${player.name} (${player.position})`,body:`R${DRAFT.round} P${DRAFT.pick}`,ts:Date.now()}); if(!nextDraftSlot()){ save(league); renderDraft(); return; } save(league); renderDraft(); }
$('#drStart').onclick=()=>{ DRAFT.started=true; DRAFT.round=1; DRAFT.pick=1; DRAFT.order=draftOrder(); DRAFT.log=[]; renderDraft(); };
$('#drAuto').onclick=()=>{ if(!DRAFT.started) return alert('Start draft first'); const onClock=league.teams.find(t=> t.id===DRAFT.order[DRAFT.pick-1]); const best=[...league.college.prospects].sort((a,b)=> prospectScore(b)-prospectScore(a))[0]; if(best) doDraftPick(onClock,best); };
$('#drUserPick').onclick=()=>{ if(!DRAFT.started) return alert('Start draft first'); const my=league.teams[USER]; const best=[...league.college.prospects].sort((a,b)=> prospectScore(b)-prospectScore(a))[0]; if(best) doDraftPick(my,best); };
let UDFA_POOL=[]; $('#drUDFAStart').onclick=()=>{ if(!UDFA_POOL.length){ UDFA_POOL = Array.from({length:40},()=>({id:uuid(),name:makeName()+' (UDFA)',pos:choice(POS),grade:'C',college:'State'})); } alert('UDFA pool created'); };
$('#drUDFAOffer').onclick=()=>{ if(!UDFA_POOL.length) return alert('Start UDFA Period'); const cand=UDFA_POOL.sort((a,b)=> prospectScore(b)-prospectScore(a))[0]; const p=prospectToPlayer(cand,10,32); p.contract.years=3; p.contract.salary=0.8; p.contract.bonus=0.2; league.teams[USER].roster.push(p); UDFA_POOL=UDFA_POOL.filter(x=>x.id!==cand.id); league.mediaFeed.unshift({week:league.week,type:'game',headline:`UDFA: ${league.teams[USER].abbr} signs ${p.name}`,body:`3y/$0.8M`,ts:Date.now()}); save(league); renderDraft(); renderFrontOffice(); renderRosters(); };

function renderSettings(){ $('#setCap').value=league.salaryCap; }
$('#btnApplyCap').onclick=()=>{ league.salaryCap=parseInt($('#setCap').value||'200'); save(league); renderFrontOffice(); renderRosters(); renderHome(); };

const GD={homeId:null,awayId:null,poss:'home',quarter:1,clock:900,spot:25,down:1,toGo:10,homeScore:0,awayScore:0,feed:[]};
function setupExhibition(){ const my=league.teams[USER]; const opp=choice(league.teams.filter((_,i)=>i!==USER)); GD.homeId=my.id; GD.awayId=opp.id; GD.poss='home'; GD.quarter=1; GD.clock=900; GD.spot=25; GD.down=1; GD.toGo=10; GD.homeScore=0; GD.awayScore=0; GD.feed=[]; renderGameDay(); }
function renderGameDay(){ if(!GD.homeId||!GD.awayId) setupExhibition(); const home=teamById(GD.homeId), away=teamById(GD.awayId); $('#scoreboard').innerHTML=`<div><b>${away.abbr}</b> ${GD.awayScore}</div><div>@</div><div><b>${home.abbr}</b> ${GD.homeScore}</div>`; $('#gdHud').textContent=`Q${GD.quarter} ${Math.floor(GD.clock/60)}:${(GD.clock%60).toString().padStart(2,'0')} • ${GD.poss.toUpperCase()} ball • ${GD.spot} yd • ${GD.down} & ${GD.toGo}`; $('#pbp').innerHTML=GD.feed.slice(-60).map(s=>s).join('<br>'); }
function pushFeed(m){ GD.feed.push(m); renderGameDay(); } function updateHud(){ renderGameDay(); }
function switchPossession(touchback=false){ GD.poss=GD.poss==='home'?'away':'home'; GD.down=1; GD.toGo=10; GD.spot= touchback? 25 : (100 - Math.max(20, rand(35,60))); GD.drive=(GD.drive||0)+1; GD.drivePlays=0; GD.driveYards=0; }
function fieldGoalChance(dist,k){ const base=0.95 - Math.max(0,(dist-35))*0.02; const adj=(k-75)*0.004; return Math.max(0.05, Math.min(0.98, base+adj)); }
function showAimMeter(cb){ const w=$('#fgAimWrap'), b=$('#fgBar'), tap=$('#fgTap'); if(!w||!b||!tap){ cb(0.5); return; } w.style.display='flex'; const t0=performance.now(); let raf; function frame(t){ const p=((t-t0)%1200)/1200; b.style.left=(p*82)+'%'; raf=requestAnimationFrame(frame);} raf=requestAnimationFrame(frame); tap.onclick=()=>{ const left=parseFloat(b.style.left||'0'); const d=Math.abs(left-41); const boost=Math.max(0,1 - d/41); cancelAnimationFrame(raf); w.style.display='none'; cb(boost); }; setTimeout(()=>{ if(w.style.display!=='none'){ cancelAnimationFrame(raf); w.style.display='none'; cb(0.5);} }, 1600); }
function animatePlay(before,yards,done){ const c=$('#gdCanvas'); const ctx=c.getContext('2d'); ctx.clearRect(0,0,c.width,c.height); const startX=c.width*(before/100), endX=c.width*((before+yards)/100); const y=c.height*0.65; let t0=null; function step(ts){ if(!t0) t0=ts; const p=Math.min(1,(ts-t0)/450); const x=startX+(endX-startX)*p; ctx.clearRect(0,0,c.width,c.height); ctx.fillStyle='rgba(255,255,255,.8)'; ctx.fillRect(x,y,6,6); if(p<1) requestAnimationFrame(step); else done&&done(); } requestAnimationFrame(step); }
let offenseCall='run_inside', defenseCall='base'; document.querySelectorAll('.play').forEach(b=> b.onclick=()=>{ offenseCall=b.dataset.call; pushFeed('Offense: '+offenseCall.replace('_',' ')); }); document.querySelectorAll('.dplay').forEach(b=> b.onclick=()=>{ defenseCall=b.dataset.call; pushFeed('Defense: '+defenseCall); });
function resolvePlay(){ const before=GD.spot; const home=teamById(GD.homeId), away=teamById(GD.awayId); const offenseTeam=GD.poss==='home'?home:away; const defenseTeam=GD.poss==='home'?away:home; const off=teamOVR(offenseTeam), def=teamOVR(defenseTeam); let base=Math.round((off-def)/6); let call=offenseCall; let yards= base + (call==='run_inside'? rand(0,6): call==='run_outside'? rand(-2,10): call==='short_pass'? rand(-3,12): call==='deep_pass'? rand(-8,30): rand(-3,14)); const ofForm=$('#ofForm').value, dfForm=$('#dfForm').value; if(ofForm==='Trips'&&call.includes('pass')) yards+=2; if(ofForm==='I-Form'&&call.includes('run')) yards+=2; if(dfForm==='Dime'&&call.includes('deep_pass')) yards-=3; if(defenseCall==='blitz'&&call.includes('pass')) yards += rand(-8,8); if(defenseCall==='zone'&&call.includes('short_pass')) yards += rand(-3,6); let tick=Math.max(18,22-yards); if(GD.clock<120 && ((GD.poss==='home'&&GD.homeScore<GD.awayScore)||(GD.poss==='away'&&GD.awayScore<GD.homeScore))) tick-=4; if(call.includes('pass')&&GD.clock<120&&Math.random()<0.3){ pushFeed('Out of bounds — clock stops.'); tick-=6; } GD.clock=Math.max(0, GD.clock - Math.max(6,tick)); animatePlay(before,yards,()=>{}); GD.spot=Math.max(1, Math.min(99, GD.spot+yards)); GD.toGo=Math.max(1, GD.toGo - yards); GD.drivePlays=(GD.drivePlays||0)+1; GD.driveYards=(GD.driveYards||0)+yards; if(yards<=-7) pushFeed('Sack/TFL for '+(-yards)); else if(yards>=15) pushFeed('Big gain of '+yards+'!'); if(GD.spot>=100){ if(GD.poss==='home') GD.homeScore+=7; else GD.awayScore+=7; pushFeed('Touchdown!'); switchPossession(true); } else if(GD.toGo<=0){ GD.down=1; GD.toGo=10; pushFeed('First down.'); } else { GD.down+=1; if(GD.down>4){ pushFeed('Turnover on downs.'); switchPossession(false); } } if(GD.clock===0){ GD.quarter+=1; GD.clock=900; if(GD.quarter===3){ switchPossession(true); } if(GD.quarter>4){ pushFeed('Final whistle.'); } } updateHud(); }
$('#btnSnap').onclick=()=>resolvePlay(); $('#btnSimDrive').onclick=()=>{ for(let i=0;i<8;i++){ resolvePlay(); if(GD.quarter>4) break; } }; $('#btnKick').onclick=()=>{ if(GD.down!==4){ return alert('Kick usually on 4th down.'); } const distToEZ=100-GD.spot; const kickDist=Math.round(distToEZ+17); const my=teamById(GD.poss==='home'?GD.homeId:GD.awayId); const kOVR=Math.max(72,(my.roster.find(p=>p.position==='K')||{overall:72}).overall); showAimMeter((boost)=>{ const prob=Math.min(0.98, fieldGoalChance(kickDist,kOVR)+(boost-0.5)*0.25); const made=Math.random()<prob; pushFeed(`Field Goal ${kickDist} — ${made?'GOOD':'NO GOOD'}`); if(made){ if(GD.poss==='home') GD.homeScore+=3; else GD.awayScore+=3; switchPossession(true);} else { switchPossession(false); GD.spot=Math.max(20,100-kickDist);} updateHud(); }); };

function renderFreeAgencyInit(){}
function renderTradeCenterInit(){}

function renderStatsInit(){}
function renderCollegeInit(){}

function renderFrontOfficeInit(){}

function renderMediaInit(){}

function renderScheduleInit(){}

function renderHomeInit(){}

function renderSettings(){ $('#setCap').value=league.salaryCap; }

function initial(){ renderHome(); renderRosters(); renderStandings(); renderSchedule(); renderMedia(); renderStats(); renderCollege(); renderFrontOffice(); renderFreeAgency(); renderTradeCenter(); renderDraft(); renderSettings(); renderGameDay(); }
initial(); showTab('home');

// === [TFL QA FIX] Consolidated guards & validator (inline) ===
(function(){
  const q=(id)=>document.getElementById(id);
  window.league = window.league || window.makeLeague?.() || window.league;
  if(!window.league){ window.league = { teams: [], mediaFeed: [], awards:{weekly:[],season:{}}, college:{prospects:[]}, playerStats:{}, season:1, week:1, salaryCap:200 }; }
  window.GD = window.GD || { clock: 900, quarter: 1, poss: 'home', timeouts:{home:3,away:3}, spot:25, down:1, toGo:10, homeScore:0, awayScore:0 };
  league.mediaFeed = Array.isArray(league.mediaFeed)? league.mediaFeed: [];
  league.awards = league.awards || {weekly:[],season:{}}; league.awards.weekly = league.awards.weekly || [];
  league.college = league.college || {prospects:[]}; league.playerStats = league.playerStats || {};
  (league.teams||[]).forEach(t=>{ if(!Array.isArray(t.picks)) t.picks=[]; t.picks.forEach(pk=>{ if(!pk.originalTeamId) pk.originalTeamId = t.id; }); });
  if(!q('fgAimWrap')){ window.showAimMeter=(cb)=>cb(0.5); }
  window.TFL=window.TFL||{}; window.TFL.validate=function(){ const ids=["foExportCSV", "postJune", "trTargetPos", "trExclude", "trBand", "fgAimWrap", "fgBar", "fgTap", "gdOnside", "resignWrap", "resignList", "resignSubmit", "foTeam", "foCap", "foProj", "faPos", "faSort", "faSimDay", "trTeamA", "trTeamB", "trPropose", "trResult", "drStart", "drProspects", "drLog", "scoreboard", "gdCanvas", "gdHud", "pbp", "btnSnap", "btnSimDrive", "btnKick", "ofForm", "dfForm", "btnNew", "btnSave", "btnLoad", "rosTeam", "rosCap", "rosList", "standingsList", "schedList", "mediaFeed", "awardsList", "collegeList", "foList", "drRound", "drPick", "drTeam", "drAuto", "drUserPick", "drUDFAStart", "drUDFAOffer", "setCap", "btnApplyCap"]; const missing=ids.filter(id=>!document.getElementById(id)); const fns=['resolvePlay','renderFrontOffice','renderFreeAgency','renderTradeCenter','renderDraft','renderRosters','renderSchedule','renderStandings','renderStats','renderCollege','renderMedia']; const fmissing=fns.filter(f=>typeof window[f]!=='function'); const res={missing_ids:missing, missing_functions:fmissing, teams:(league.teams||[]).length}; try{console.table(res);}catch(e){} return res; };
})();
// === [/TFL QA FIX] ===
})();